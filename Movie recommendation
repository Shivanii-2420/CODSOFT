import pandas as pd
import difflib
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

def load_data(file_path):
    return pd.read_csv(file_path)

def preprocess_data(data, features):
    for feature in features:
        data[feature] = data[feature].fillna('')
    combined_features = data[features].apply(lambda row: ' '.join(row), axis=1)
    return combined_features

def get_similarity_matrix(feature_vectors):
    vectorizer = TfidfVectorizer()
    return cosine_similarity(vectorizer.fit_transform(feature_vectors))

def get_closest_match(user_input, all_titles):
    return difflib.get_close_matches(user_input, all_titles, n=1)

def get_index_of_movie(data, title):
    return data[data['title'] == title]['index'].values[0]

def recommend_and_print_movies(data, similarity_matrix, index_of_the_movie, num_recommendations=10):
    similarity_scores = list(enumerate(similarity_matrix[index_of_the_movie]))
    sorted_similar_movies = sorted(similarity_scores, key=lambda x: x[1], reverse=True)[:num_recommendations]
    
    print('Movies suggested for you:\n')
    for i, (index, score) in enumerate(sorted_similar_movies, 1):
        title = data.iloc[index]['title']
        print(f"{i}. {title}")

# Load data
movies_data = load_data('/content/movies.csv')

# Preprocess data
selected_features = ['genres', 'keywords', 'tagline', 'cast', 'director']
combined_features = preprocess_data(movies_data, selected_features)

# Get similarity matrix
similarity_matrix = get_similarity_matrix(combined_features)

# Get user input
movie_name = input('Enter your favorite movie name: ')

# Find close match
close_match = get_closest_match(movie_name, movies_data['title'].tolist())

if close_match:
    close_match = close_match[0]
    # Recommend movies
    index_of_the_movie = get_index_of_movie(movies_data, close_match)
    recommend_and_print_movies(movies_data, similarity_matrix, index_of_the_movie)
